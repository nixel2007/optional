#Использовать fluent
#Использовать lambdas

// Значение, хранящееся в Опциональный.
Перем ХранимыйОбъект;

// Конструктор объекта.
//
// Параметры:
//   Объект - Произвольный - Значение, которое необходимо упаковать в Опциональный.
//   ДопустимоНеопределено - Булево - Флаг допустимости упаковывания значения "Неопределено".
//
Процедура ПриСозданииОбъекта(Объект, ДопустимоНеопределено = Ложь)
	
	ХранимыйОбъект = Объект;
	
	Если НЕ ДопустимоНеопределено Тогда
		ВызватьИсключениеЕслиПустой();
	КонецЕсли;
	
КонецПроцедуры

// Проверка незаполненности значения в Опциональный.
//
//  Возвращаемое значение:
//   Булево
//
Функция Пустой() Экспорт
	Возврат ХранимыйОбъект = Неопределено;
КонецФункции

// Проверка заполненности значения в Опциональный.
//
//  Возвращаемое значение:
//   Булево
//
Функция СодержитЗначение() Экспорт
	Возврат НЕ Пустой();
КонецФункции

// Выполнить действие над значением, если оно существует.
//
// Параметры:
//   ФункцияОбработки - Действие - Делегат на функцию с одним параметром в которую будет передан хранимый объект
//    и которая должна вернуть результат обработки
//                    - Строка - Лямбда выражение функция с одним параметром в которую будет передан хранимый объект
//    и которая должна вернуть результат обработки
//
//  Возвращаемое значение:
//   Опциональный - Обработанное значение, упакованное в Опциональный.
//
Функция Обработать(ФункцияОбработки) Экспорт
	
	Если Пустой() Тогда
		Возврат ЭтотОбъект;
	КонецЕсли;
	
	Возврат Новый Опциональный(
		ДействиеИзПараметров(ФункцияОбработки, ФункциональныеИнтерфейсы.УниФункция())
			.Выполнить(ХранимыйОбъект),
		Истина
	);

КонецФункции

// Выполнить действие, возвращающее другой Опциональный, над значением, если оно существует.
//
// Параметры:
//   ФункцияРазвертки - Действие - Делегат на функцию с одним параметром в которую будет передан хранимый объект
//    и которая должна вернуть новый Опциональный с результатом развертки
//                    - Строка - Лямбда выражение функция с одним параметром в которую будет передан хранимый объект
//    и которая должна вернуть новый Опциональный с результатом развертки
//
//  Выбрасывает исключение:
//    - Если функция развертки вернула значение, отличное от Опциональный.
//
//  Возвращаемое значение:
//   Опциональный - Обработанное значение.
//
Функция Развернуть(ФункцияРазвертки) Экспорт

	Если Пустой() Тогда
		Возврат Новый Опциональный(Неопределено, Истина);
	КонецЕсли;

	РезультатОбработки = ДействиеИзПараметров(ФункцияРазвертки, ФункциональныеИнтерфейсы.УниФункция())
		.Выполнить(ХранимыйОбъект);

	Если ТипЗнч(РезультатОбработки) <> Тип("Опциональный") Тогда
		ВызватьИсключение "Функция развертки не вернула Опциональный";
	КонецЕсли;
	
	Возврат РезультатОбработки;

КонецФункции

// Выполнить действие фильтрации над значением, если оно существует.
//
// Параметры:
//   ФункцияФильтрации - Действие - Делегат на функцию с одним параметром в которую будет передан хранимый объект
//    и которая должна вернуть Булево, Истина в случае если объект соответствует фильтру
//                    - Строка - Лямбда выражение функция с одним параметром в которую будет передан хранимый объект
//    и которая должна вернуть Булево, Истина в случае если объект соответствует фильтру
//
//  Возвращаемое значение:
//   Опциональный - Отфильтрованное значение, упакованное в Опциональный.
//		Пустой Опциональный, если функция фильтрации вернула Ложь, иначе этот же экземпляр Опциональный.
//
Функция Фильтровать(ФункцияФильтрации) Экспорт
	
	Если Пустой() Тогда
		Возврат ЭтотОбъект;
	КонецЕсли;
	
	РезультатФильтрации = ДействиеИзПараметров(ФункцияФильтрации, ФункциональныеИнтерфейсы.УниФункция())
		.Выполнить(ХранимыйОбъект);

	Если РезультатФильтрации Тогда
		Возврат ЭтотОбъект;
	Иначе
		Возврат Новый Опциональный(Неопределено, Истина);
	КонецЕсли;

КонецФункции

// Выполнить действие над значением, если оно существует.
//
// Параметры:
//   ФункцияОбработки - Действие - Делегат на процедуру с одним параметром в которую будет передан хранимый объект
//                    - Строка - Лямбда выражение процедура с одним параметром в которую будет передан хранимый объект
//
Процедура ЕслиСодержитЗначение(ФункцияОбработки) Экспорт

	Если Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ДействиеИзПараметров(ФункцияОбработки, ФункциональныеИнтерфейсы.УниПроцедура())
		.Выполнить(ХранимыйОбъект);

КонецПроцедуры

// Выполнить действие над значением, если оно существует, или выполнить другое действие, если значение не существует.
//
// Параметры:
//   ФункцияОбработки - Действие - Делегат на процедуру с одним параметром в которую будет передан хранимый объект
//                    - Строка - Лямбда выражение процедура с одним параметром в которую будет передан хранимый объект
//   ФункцияОбработкиИначе - Действие - Делегат на процедуру без параметров 
//                         - Строка - Лямбда выражение процедура без параметров
//
Процедура ЕслиСодержитЗначениеИначе(ФункцияОбработки, ФункцияОбработкиИначе) Экспорт
	
	Если СодержитЗначение() Тогда
		ДействиеИзПараметров(ФункцияОбработки, ФункциональныеИнтерфейсы.УниПроцедура())
			.Выполнить(ХранимыйОбъект);
	Иначе
		ДействиеИзПараметров(ФункцияОбработкиИначе, ФункциональныеИнтерфейсы.Запускаемый())
			.Выполнить();
	КонецЕсли;

КонецПроцедуры

// Выполнить действие по расчету нового Опциональный, если текущий экземпляр Опциональный содержит пустое значение.
//
// Параметры:
//   ФункцияСоздания - Действие - Делегат на функцию без параметров 
//                   - Строка - Лямбда выражение функция без параметров
//
//  Возвращаемое значение:
//   Опциональный - Новое значение, упакованное в Опциональный, 
//		если текущий экземпляр Опциональный содержит пустое значение.
//		Текущий экземпляр Опциональный, если он содержал значение.
//
Функция Или_(ФункцияСоздания) Экспорт
	
	Если СодержитЗначение() Тогда
		Возврат ЭтотОбъект;
	КонецЕсли;

	Возврат Новый Опциональный(
		ДействиеИзПараметров(ФункцияСоздания, ФункциональныеИнтерфейсы.Вызываемый())
			.Выполнить(),
		Истина
	);

КонецФункции

// Возвращает ПроцессорКоллекций, содержащий 0 или 1 элемент. Если экземпляр Опциональный содержит значение,
//	то ПроцессорКоллекций будет содержать это распакованное значение.
//
//  Возвращаемое значение:
//   ПроцессорКоллекций - ПроцессорКоллекций, содержащий распакованное значение Опциональный, если оно было заполнено.
//		Пустой ПроцессорКоллекций, если экземпляр Опциональный не содержал значение. 
//
Функция ПроцессорКоллекций() Экспорт

	Если Пустой() Тогда
		Возврат ПроцессорыКоллекций.ИзНабора();
	КонецЕсли;

	Возврат ПроцессорыКоллекций.ИзНабора(ХранимыйОбъект);

КонецФункции

// Получить значение, содержащееся в экземпляре Опциональный.
//
//  Выбрасывает исключение:
//    - Если экземпляр Опциональный не содержит значение.
//
//  Возвращаемое значение:
//   Произвольный - Значение, содержавшееся в экземпляре Опциональный.
//
Функция Получить() Экспорт
	ВызватьИсключениеЕслиПустой();
	Возврат ХранимыйОбъект;
КонецФункции

// Получить значение, содержащееся в экземпляре Опциональный, или переданное значение, 
//	если экземпляр Опциональный пустой.
//
// Параметры:
//   ЗначениеИначе - Произвольный - Значение, которое должна вернуть функция, если текущий экземпляр Опциональный
//		не содержит значение.
//
//  Возвращаемое значение:
//   Произвольный - Значение, содержавшееся в экземпляре Опциональный, или переданное значение.
//
Функция Иначе_(ЗначениеИначе) Экспорт

	Если СодержитЗначение() Тогда
		Возврат ХранимыйОбъект;
	КонецЕсли;

	Возврат ЗначениеИначе;

КонецФункции

// Получить значение, содержащееся в экземпляре Опциональный, или вычислить новое значение, 
//	если экземпляр Опциональный пустой.
//
// Параметры:
//   ФункцияПолученияЗначения - Действие - Делегат на функцию без параметров 
//                            - Строка - Лямбда выражение функция без параметров
//
//  Возвращаемое значение:
//   Произвольный - Значение, содержавшееся в экземпляре Опциональный,
//		или результат переданной функции получения значения.
//
Функция ИначеПолучить(ФункцияПолученияЗначения) Экспорт
	
	Если СодержитЗначение() Тогда
		Возврат ХранимыйОбъект;
	КонецЕсли;

	Возврат ДействиеИзПараметров(ФункцияПолученияЗначения, ФункциональныеИнтерфейсы.Вызываемый())
		.Выполнить();

КонецФункции

// Получить значение, хранящееся в экземпляре Опциональный, или выбросить исключение с переданной информацией об ошибке.
//
// Параметры:
//   ИнформацияОбОшибке - ИнформацияОбОшибке - Данные исключения, которое необходимо выбросить, если Опциональный
//		содержит пустое значение.
//
//  Выбрасывает исключение:
//    - Если экземпляр Опциональный не содержит значение.
//
//  Возвращаемое значение:
//   Произвольный - Значение, содержавшееся в экземпляре Опциональный.
//
Функция ИначеВызватьИсключение(ИнформацияОбОшибке) Экспорт
	
	Если Пустой() Тогда
		ВызватьИсключение ИнформацияОбОшибке;
	КонецЕсли;
	
	Возврат ХранимыйОбъект;

КонецФункции

Процедура ВызватьИсключениеЕслиПустой()
	Если Пустой() Тогда
		ВызватьИсключение "Хранимое значение является Неопределено";
	КонецЕсли;
КонецПроцедуры

Функция ДействиеИзПараметров(КонвертируемаяФункция, Интерфейс)
	
	Если ТипЗнч(КонвертируемаяФункция) = Тип("Строка") Тогда
		Возврат Лямбда.Выражение(КонвертируемаяФункция)
			.Интерфейс(Интерфейс)
			.ВДействие();
	Иначе
		Возврат КонвертируемаяФункция;
	КонецЕсли;

КонецФункции
